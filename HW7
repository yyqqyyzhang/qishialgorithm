// LeetCode 231
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if (n<=0) return false;
        return !(n&(n-1));
    }
};

// LeedCode 268
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int num=0;
        int i=0;
        for (i; i<nums.size(); i++) {
            num=num^nums[i]^i;
        }
        return num^i;
    }
};

// LeetCode 342
public class Solution {
    public boolean isPowerOfFour(int num) {
        return (num > 0) && ((num & (num - 1)) == 0) && ((num & 0x55555555) == num);
    }
}

// LeetCode 338
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> result={0};
        for (int i=1; i<=num; i++) {
            result.push_back(result[i>>1]+(i&1));
        }
        return result;
    }
};
